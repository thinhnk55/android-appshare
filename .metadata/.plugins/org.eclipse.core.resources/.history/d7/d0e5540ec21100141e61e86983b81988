package vn.vfossa.music;

import java.util.ArrayList;
import java.util.List;

import vn.vfossa.database.DatabaseHandler;
import vn.vfossa.database.FilesData;
import vn.vfossa.shareapp.R;
import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.view.LayoutInflater;
import android.view.LayoutInflater.Filter;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

public class MusicAdapter extends ArrayAdapter<FilesData> {

	private Activity context;
	private ArrayList<FilesData> song;
	private SongHolder holder;

	public public MusicAdapter(Activity context, ArrayList<FilesData> song) {
		super(context, R.layout.media_item_layout, song);
		this.context = context;
		this.song = song;

	}

	@Override
	public View getView(int position, View view, ViewGroup parent) {
		View rowView = view;
		if (rowView == null) {
			LayoutInflater inflater = context.getLayoutInflater();
			rowView = inflater.inflate(R.layout.media_item_layout, null, true);
			holder = new SongHolder();
			holder.songTitle = (TextView) rowView.findViewById(R.id.songTitle);
			holder.size = (TextView) rowView.findViewById(R.id.songSize);
			holder.checkBox = (CheckBox) rowView
					.findViewById(R.id.checkBoxItem);
			holder.imageView = (ImageView) rowView
					.findViewById(R.id.image_music);
			rowView.setTag(holder);
		} else {
			holder = (SongHolder) rowView.getTag();
		}

		holder.songTitle.setText(song.get(position).getName());
		holder.size.setText(song.get(position).getSize()+"");

		if (song.get(position).getImage() != null) {
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inPurgeable = true;

			Bitmap bitmap = BitmapFactory.decodeByteArray(song.get(position).getImage(),
					0, song.get(position).getImage().length, options);

			Bitmap itemImage = Bitmap.createScaledBitmap(bitmap, 100, 100,
					true);
			holder.imageView.setImageBitmap(itemImage);
		} else {
			holder.imageView.setImageResource(R.drawable.music);
		}
		
		return rowView;
	}

	static class SongHolder {
		CheckBox checkBox;
		TextView size;
		TextView songTitle;
		ImageView imageView;
	}

	@Override
	public Filter getFilter() {

		return new Filter() {

			@Override
			protected void publishResults(CharSequence constraint,
					FilterResults results) {
				if (results != null) {
					song.clear();
					@SuppressWarnings("unchecked")
					ArrayList<SongDetails> items = new ArrayList<SongDetails>(
							(ArrayList<SongDetails>) results.values);

					if (items.size() > 0) {
						for (SongDetails item : items) {
							song.add(item);
						}
					}
					notifyDataSetChanged();
				}

			}

			@Override
			protected FilterResults performFiltering(CharSequence constraint) {
				DatabaseHandler db = new DatabaseHandler(context);
				ArrayList<SongDetails> songs = new ArrayList<SongDetails>();
				List<SongData> listSongs = db.getAllSongDatas();
				for (SongData sd : listSongs) {
					SongDetails song = new SongDetails();
					song.setSongID(sd.getID());
					song.setSongName(sd.getName());
					song.setSongPath(sd.getPath());
					song.setSongArtist(sd.getArtist());
					song.setSongAlbum(sd.getAlbum());
					byte[] data = sd.getImage();
					if (data != null) {
						Bitmap image = BitmapFactory.decodeByteArray(data, 0,
								data.length);
						song.setImage(image);
					} else {
						song.setImage(null);
					}

					songs.add(song);
				}
				FilterResults results = new FilterResults();
				ArrayList<SongDetails> filter = new ArrayList<SongDetails>();
				constraint = constraint.toString().toLowerCase();

				if (constraint != null && constraint.toString().length() > 0) {
					for (int i = 0; i < songs.size(); i++) {
						String strName = songs.get(i).getSongName();
						String strArtist = songs.get(i).getSongArtist();
						if (strName.toLowerCase().contains(
								constraint.toString())
								|| strArtist.toLowerCase().contains(
										constraint.toString())) {
							filter.add(songs.get(i));
						}
					}
				}
				if (constraint == null || constraint.toString().length() == 0) {
					for (int i = 0; i < songs.size(); i++) {
						filter.add(songs.get(i));
					}
				}

				results.count = filter.size();
				results.values = filter;
				return results;
			}
		};
	}
}