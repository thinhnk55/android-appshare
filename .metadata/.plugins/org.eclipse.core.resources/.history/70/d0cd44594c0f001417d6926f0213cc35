package vn.vfossa.shareapp;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import vn.vfossa.database.DatabaseHandler;
import vn.vfossa.database.FilesData;
import vn.vfossa.music.MusicAdapter;
import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.MediaMetadataRetriever;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import android.widget.Toast;

public class MusicActivity extends Activity {

	private MusicAdapter adapter;
	private ArrayList<Bitmap> listImage;
	private GridView gridView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.musics_activity);
		
		File home = new File(MEDIA_PATH);

		scanDirectory(home);
		
		setList();
		
		adapter = new MusicAdapter(this, listImage);
		
		// Set custom adapter to gridview
        gridView = (GridView) findViewById(R.id.gridViewMusic);
        gridView.setAdapter(adapter);
        
        // Implement On Item click listener
        gridView.setOnItemClickListener(new OnItemClickListener() 
        {
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,
					long arg3) {
				Toast.makeText(MusicActivity.this, position, Toast.LENGTH_SHORT).show();
			}
		});

	}

	public void setList() {
		listImage = new ArrayList<Bitmap>();
		DatabaseHandler db = new DatabaseHandler(this);
		List<FilesData> listApps = db.getAllFileDatas();

		for (FilesData file : listApps) {
			if (file.getImage() != null) {
				BitmapFactory.Options options = new BitmapFactory.Options();
				options.inPurgeable = true;

				Bitmap bitmap = BitmapFactory.decodeByteArray(file.getImage(),
						0, file.getImage().length, options);

				Bitmap itemImage = Bitmap.createScaledBitmap(bitmap, 100, 100,
						true);
				
				listImage.add(itemImage);
			} else {

				Bitmap bitmap = BitmapFactory.decodeResource(getResources(),
						R.drawable.music);
				Bitmap itemImage = Bitmap.createScaledBitmap(bitmap, 100, 100,
						true);
				
				listImage.add(itemImage);
			}
			
			
		}
	}

	private void scanDirectory(File directory) {
		if (directory != null) {
			File[] listFiles = directory.listFiles();
			if (listFiles != null && listFiles.length > 0) {
				for (File file : listFiles) {
					if (file.isDirectory()) {
						scanDirectory(file);
					} else {
						addSongToList(file);
					}

				}
			}
		}
	}

	private void addSongToList(File file) {
		DatabaseHandler db = new DatabaseHandler(MusicActivity.this);
		if (file.getName().endsWith(".mp3")) {
			if (db.checkSongPath(file.getPath())) {
				String songName = file.getName().substring(0,
						(file.getName().length() - 4));
				String songPath = file.getPath();
				MediaMetadataRetriever media = new MediaMetadataRetriever();
				media.setDataSource(songPath);
				byte[] data = media.getEmbeddedPicture();
				String songArtist = media
						.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST);
				String songAlbum = media
						.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ALBUM);
				media.release();
				db.addFileData(new FilesData("music", songName, songPath, data,
						0));
				db.close();
			}
		}
	}

}
