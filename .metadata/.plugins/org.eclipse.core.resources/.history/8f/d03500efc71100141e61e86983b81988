package vn.vfossa.music;

import java.util.ArrayList;
import java.util.List;

import vn.vfossa.database.DatabaseHandler;
import vn.vfossa.database.FilesData;
import vn.vfossa.shareapp.R;
import vn.vfossa.shareapp.R.drawable;
import vn.vfossa.shareapp.R.id;
import vn.vfossa.shareapp.R.layout;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import android.widget.ListView;
import android.widget.Toast;

public class MusicActivity extends Activity {

	private MusicAdapter adapter;
	private ArrayList<Bitmap> listImage;
	private ArrayList<FilesData> listMusics = new ArrayList<FilesData>();
	private ListView listView;
	private int[] checkedState;
	private Context context;
	private static final String type = "music";

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.musics_activity);
		context = this;
		DatabaseHandler db = new DatabaseHandler(context);
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

		tvStatus = (TextView) findViewById(R.id.tvStatus);
		etSearch = (EditText) findViewById(R.id.inputSearch);
		sortSpinner = (Spinner) findViewById(R.id.spSortBy);

		sortAdapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_spinner_item, typeSort);
		sortAdapter
				.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		sortSpinner.setAdapter(sortAdapter);
		sortSpinner.setSelection(typeSelected);
		sortSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parentView,
					View selectedItemView, int position, long id) {
				songs.clear();
				typeSelected = position;
				DatabaseHandler db = new DatabaseHandler(context);
				List<SongData> listSongs = db.Order(typeSort[position]
						.toLowerCase());
				loadList(listSongs);
			}

			@Override
			public void onNothingSelected(AdapterView<?> parentView) {

			}
		});

		List<SongData> listSongs = db.getAllSongDatas();
		loadList(listSongs);
		lv.setItemsCanFocus(false);
		lv.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				int songIndex = getPosition(songs.get(position).getSongID(),
						typeSort[sortSpinner.getSelectedItemPosition()]
								.toLowerCase());

				Intent index = new Intent(getApplicationContext(),
						PlayMusic.class);
				index.putExtra("songIndex", songIndex);
				index.putExtra("typeSort", typeSort[sortSpinner
						.getSelectedItemPosition()].toLowerCase());
				setResult(100, index);

				finish();
				overridePendingTransition(R.anim.left_in, R.anim.right_out);
			}
		});

		etSearch.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				if (!adapter.isEmpty()){
					adapter.getFilter().filter(s);
				}
			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {

			}

			@Override
			public void afterTextChanged(Editable s) {

			}
		});
	}

	public void setList() {
		listImage = new ArrayList<Bitmap>();

		DatabaseHandler db = new DatabaseHandler(this);
		List<FilesData> listApps = db.getAllFileWithType(type);

		for (FilesData file : listApps) {
			if (file.getImage() != null) {
				BitmapFactory.Options options = new BitmapFactory.Options();
				options.inPurgeable = true;

				Bitmap bitmap = BitmapFactory.decodeByteArray(file.getImage(),
						0, file.getImage().length, options);

				Bitmap itemImage = Bitmap.createScaledBitmap(bitmap, 100, 100,
						true);

				listImage.add(itemImage);
			} else {

				Bitmap bitmap = BitmapFactory.decodeResource(getResources(),
						R.drawable.music);
				Bitmap itemImage = Bitmap.createScaledBitmap(bitmap, 100, 100,
						true);

				listImage.add(itemImage);
			}

		}
	}
}
